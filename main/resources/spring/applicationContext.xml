<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:task="http://www.springframework.org/schema/task" xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
               http://www.springframework.org/schema/task
           http://www.springframework.org/schema/task/spring-task-3.0.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-4.1.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <bean name="springContextUtils" class="com.metarnet.core.common.utils.SpringContextUtils" lazy-init="false" />

    <context:component-scan base-package="com" />

    <!-- 声明一个 Hibernate 4 的 事务管理器供代理类自动管理事务用 -->
    <bean id="transactionManager1" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>

    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:/jdbc.properties</value>
                <value>classpath:/params.properties</value>
            </list>
        </property>
    </bean>

    <!-- 需要引入aop的命名空间 -->
    <aop:config>
        <!-- 切入点指明了在执行Service的所有方法时产生事务拦截操作 -->
        <!--<aop:pointffidt id="daoMethods" expression="execution(* com.metarnet.*.service.*.*(..))" />-->
        <aop:pointcut id="daoMethods1"
                expression="execution(* com.metarnet.*.*.service.*.*(..)) or execution(* com.metarnet.core.common.service.*.*(..))" />
        <!-- 定义了将采用何种拦截操作，这里引用到 txAdvice -->
        <aop:advisor advice-ref="txAdvice1" pointcut-ref="daoMethods1" />
    </aop:config>
    <!-- 需要引入tx的命名空间 -->
    <!-- 这是事务通知操作，使用的事务管理器引用自 transactionManager -->
    <tx:advice id="txAdvice1" transaction-manager="transactionManager1">
        <tx:attributes>
            <!-- 指定哪些方法需要加入事务，这里懒惰一下全部加入，可以使用通配符来只加入需要的方法 -->
            <!--<tx:method name="insert*" rollback-for="com.unicom.ucloud.common.exception.UcloudException"/>-->
            <!--<tx:method name="add*" rollback-for="com.unicom.ucloud.common.exception.UcloudException"/>-->
            <!--<tx:method name="update*" rollback-for="com.unicom.ucloud.common.exception.UcloudException"/>-->
            <!--<tx:method name="modify*" rollback-for="com.unicom.ucloud.common.exception.UcloudException"/>-->
            <!--<tx:method name="save*" rollback-for="com.unicom.ucloud.common.exception.UcloudException"/>-->
            <!--<tx:method name="start*" rollback-for="com.unicom.ucloud.common.exception.UcloudException"/>-->
            <!--<tx:method name="submit*" rollback-for="com.unicom.ucloud.common.exception.UcloudException"/>-->
            <!--<tx:method name="delete*" rollback-for="com.unicom.ucloud.common.exception.UcloudException"/>-->
            <!--<tx:method name="remove*" rollback-for="com.unicom.ucloud.common.exception.UcloudException"/>-->
            <!--<tx:method name="create*" rollback-for="com.unicom.ucloud.common.exception.UcloudException"/>-->
            <!--<tx:method name="copy*" rollback-for="com.unicom.ucloud.common.exception.UcloudException"/>-->

            <tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="save*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="update*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="import*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="find*" propagation="REQUIRED" read-only="true" />
            <tx:method name="create*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="modify*" propagation="REQUIRED" rollback-for="Exception" />
        </tx:attributes>
    </tx:advice>


    <!-- 声明一个 Hibernate 4 的 事务管理器供代理类自动管理事务用 -->
    <bean id="transactionManager2" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory2" />
    </bean>

    <!-- 需要引入aop的命名空间 -->
    <aop:config>
        <!-- 切入点指明了在执行Service的所有方法时产生事务拦截操作 -->
        <aop:pointcut id="daoMethods2"
                expression="execution(* com.metarnet.*.*.service.*.*(..)) or execution(* com.metarnet.core.common.service.*.*(..))" />
        <!-- 定义了将采用何种拦截操作，这里引用到 txAdvice -->
        <aop:advisor advice-ref="txAdvice2" pointcut-ref="daoMethods2" />
    </aop:config>
    <!-- 需要引入tx的命名空间 -->
    <!-- 这是事务通知操作，使用的事务管理器引用自 transactionManager -->
    <tx:advice id="txAdvice2" transaction-manager="transactionManager2">
        <tx:attributes>
            <!-- 指定哪些方法需要加入事务，这里懒惰一下全部加入，可以使用通配符来只加入需要的方法 -->
            <!--<tx:method name="insert*" rollback-for="com.unicom.ucloud.common.exception.UcloudException"/>-->
            <!--<tx:method name="add*" rollback-for="com.unicom.ucloud.common.exception.UcloudException"/>-->
            <!--<tx:method name="update*" rollback-for="com.unicom.ucloud.common.exception.UcloudException"/>-->
            <!--<tx:method name="modify*" rollback-for="com.unicom.ucloud.common.exception.UcloudException"/>-->
            <!--<tx:method name="save*" rollback-for="com.unicom.ucloud.common.exception.UcloudException"/>-->
            <!--<tx:method name="start*" rollback-for="com.unicom.ucloud.common.exception.UcloudException"/>-->
            <!--<tx:method name="submit*" rollback-for="com.unicom.ucloud.common.exception.UcloudException"/>-->
            <!--<tx:method name="delete*" rollback-for="com.unicom.ucloud.common.exception.UcloudException"/>-->
            <!--<tx:method name="remove*" rollback-for="com.unicom.ucloud.common.exception.UcloudException"/>-->
            <!--<tx:method name="create*" rollback-for="com.unicom.ucloud.common.exception.UcloudException"/>-->
            <!--<tx:method name="copy*" rollback-for="com.unicom.ucloud.common.exception.UcloudException"/>-->

            <tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="save*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="update*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="import*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="find*" propagation="REQUIRED" read-only="true" />
            <tx:method name="create*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="modify*" propagation="REQUIRED" rollback-for="Exception" />
        </tx:attributes>
    </tx:advice>


    <!--&lt;!&ndash;velocity配置&ndash;&gt;-->
    <!--<bffidn id="velocityConfig" class="org.springframework.web.servlet.view.velocity.VelocityConfigurer">-->
    <!--<property name="resourceLoaderPath">-->
    <!--<value>classpath:/views/</value>-->
    <!--</property>-->
    <!--<property name="velocityProperties">-->
    <!--<props>-->
    <!--<prop key="input.encoding">UTF-8</prop>-->
    <!--<prop key="output.encoding">UTF-8</prop>-->
    <!--</props>-->
    <!--</property>-->
    <!--</bean>-->
    <bean id="constants" class="com.metarnet.core.common.utils.Constants" lazy-init="false">
        <property name="appID" value="${appID}" />
        <property name="groupCompanyOrgId" value="${groupCompanyOrgId}" />
        <property name="modelName" value="${modelName}" />
        <property name="modelCode" value="${modelCode}" />
        <property name="businessType" value="${businessType}" />
        <property name="processModels" value="${processModels}" />
        <property name="powerUrl" value="${powerUrl}" />
        <property name="enumUrl" value="${enumUrl}" />
        <property name="sessionUrl" value="${sessionUrl}" />
        <property name="ftpServer" value="${ftpServer}" />
        <property name="ftpPort" value="${ftpPort}" />
        <property name="ftpUsername" value="${ftpUsername}" />
        <property name="ftpPassword" value="${ftpPassword}" />
        <property name="ftpUpDirectory" value="${ftpUpDirectory}" />
        <property name="ftpDownDirectory" value="${ftpDownDirectory}" />
        <property name="isGroupby" value="${isGroupby}" />
        <property name="groupbyColumn" value="${groupbyColumn}" />
        <property name="showMajor" value="${showMajor}" />
        <property name="REQ_FDBK_DATETIME" value="${REQ_FDBK_DATETIME}" />
        <property name="FDBK_DATETIME" value="${FDBK_DATETIME}" />
        <property name="FDBK_OPERATOR" value="${FDBK_OPERATOR}" />
        <property name="FDBK_OPERATOR_ID" value="${FDBK_OPERATOR_ID}" />
        <property name="FDBK_SHOW_COMPONENT" value="${FDBK_SHOW_COMPONENT}" />
        <property name="FDBK_PROCESS_MODEL" value="${FDBK_PROCESS_MODEL}" />
        <property name="FDBK_LIST_SHOW_ONLY_ACT_DEF_ID" value="${FDBK_LIST_SHOW_ONLY_ACT_DEF_ID}" />
        <property name="FDBK_ID" value="${FDBK_ID}" />
        <property name="copySendActDefID" value="${copySendActDefID}" />
        <property name="copySendProcModelDefID" value="${copySendProcModelDefID}" />
        <property name="mqConnUrl" value="${mqConnUrl}" />
        <property name="queueName" value="${queueName}" />
        <!--工单全景图 单子详情，是否自己模块根据流程id获取申请单或者调度单form-->
        <property name="showForm" value="${showForm}" />
        <property name="showFeedBackList" value="${showFeedBackList}" />
        <!--工单全景图 查看反馈单方法 类似的control的方法参数-->
        <property name="feedBackMethod" value="${feedBackMethod}" />
        <property name="processModelName" value="${processModelName}" />
        <property name="dispatchLinkName" value="${dispatchLinkName}" />
        <!--工单全景图 查看调度单方法 类似的control的方法参数-->
        <property name="appMethod" value="${appMethod}" />
        <!--工单全景图 查看申请单方法 类似的control的方法参数-->
        <property name="disMethod" value="${disMethod}" />
        <property name="appModel" value="${appModel}" />
        <property name="disModel" value="${disModel}" />
        <property name="fdbkModel" value="${fdbkModel}" />
        <property name="hanging" value="${hanging}" />
        <property name="businessCode" value="${businessCode}" />
        <property name="appTable" value="${appTable}" />
        <property name="disTable" value="${disTable}" />
        <property name="fdbkTable" value="${fdbkTable}" />
        <property name="appSql" value="${appSql}" />
        <property name="disSql" value="${disSql}" />
        <property name="lastGenSubSql" value="${lastGenSubSql}" />
        <property name="todoAnalysisType" value="${todoAnalysisType}" />
        <property name="todoUrl" value="${todoUrl}" />
        <property name="todoChangeUrl" value="${lastGenSubSql}" />
        <property name="COMM_LOG_URL" value="${COMM_LOG_URL}" />
        <property name="activi_rest_url" value="${activi_rest_url}" />
    </bean>

    <!--<task:annotation-driven /> &lt;!&ndash; 定时器开关&ndash;&gt;-->

    <!--<bean id="outTimeTask" class="com.metarnet.core.common.outtime.outTime">-->
    <!--<property name="soonTime" value="${soonTime}" />-->
    <!--<property name="outTimeStamp" value="${outTimeStamp}" />-->
    <!--<property name="sendSoonSMS" value="${sendSoonSMS}" />-->
    <!--<property name="sendOutTimeSMS" value="${sendOutTimeSMS}" />-->
    <!--<property name="sendOutTimeNSMS" value="${sendOutTimeNSMS}" />-->
    <!--<property name="appName" value="${appName}" />-->
    <!--<property name="sql" value="${outTimeQuerySql}" />-->
    <!--<property name="startOuttime" value="${startOuttime}" />-->
    <!--</bean>-->

    <!--<task:scheduled-tasks>-->
    <!--<task:scheduled ref="outTimeTask" method="run" cron="0 */1 * * * ?"/>-->
    <!--</task:scheduled-tasks>-->
</beans>